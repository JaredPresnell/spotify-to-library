**** DESIGN DOCUMENT: Spotify Library Project ****
OVERVIEW: Interact with Spotify to organize a music library outside of Spotify. The project is two parts, the first being a project with the spotify API and the second being a project maybe with python or maybe strictly excel. 

    1: Create a program that interacts with the spotify API to export all your currently saved songs from Spotify, as well as all of the songs within each of your playlists. 

    2: Then, create a way to compare these songs to an external music library, either an excel spreadsheet or maybe something in a database.

SECTION: Use case for Jared
    My main use case is, I have a bunch of songs in MP3 format, and periodically I go through some of my Spotify playlists and download the new songs that I have added. The problem for me is, it's not very fast to compare them by hand, and I also don't have any sort of real time data on the state of my music library without comparing them by hand.

    If the comparison was automated, it would be very easy to see which songs I needed to download, and download them one or two at a time. Right now I usually do big batches, because it takes quite a bit of time to get oriented where you are in a playlist, to start figuring out which songs you need. 

TODO: Decide if songs should export to an excel spreadsheet or to a database, or both

NOTE: I'm not sure what the best language to build this in is
    TODO: Ask Kevin 




IDEA: Once we easily can export all of our stuff and it's organized, we could fairly easily create a program, maybe using some graph theory, to like create options for mixes in a graphic format based on key and bpm, and some user input parameters eg "max bpm dif" = 8%
    NOTE: this is probably it's own project really.


Project plan:
  1) Use node / Express
    Likely the easiest way to spin up a website that allows you to click buttons and have it run some client methods
  2) Create spotify client if not already present (Jared probably has some of these written somewhere)
    Should have ability to call:
      - getTracks(userId, limit, offset)
  3) Create spotify domain logic
    getAllUserTracks
      - concatenates paginated spotifyClient::getTracks results 
    _convertJsonToCSV(spotifyObj) -> spotifyCsv
  4) Create spotify repository logic (optional)
    Note: If saving to a DB, need to set up a base mysql (or mongo, or whatever) client that reads our .env file and connects to some instance of the db
    - SpotifyFactory(spotifyRepository) -> Spotify
      Note for Jared: SpotifyFactory returns the Spotify object which calls the domain (3) methods. If we want database reads/writes, we should write the DB logic somewhere separate from the domain logic
    - SpotifyRepository
      - saveUserTrack(spotifyObj, userId)
      - saveUserTracks(spotifyObjects = [], userId)
      - readUserTracks(userId, limit = 100, offset = 0)
      - readUserTrack(spotifyId, userId)

